use rspc::Type;
use serde::{Deserialize, Serialize};

// TODO: Document this
pub enum ThumbnailReturnPolicy {
    PlaceHolder,
    /// Default
    AutoGenerated,
    ForceAutoGenerated,
}

// Implement Into for ThumbnailReturnPolicy to convert it to a string
impl ThumbnailReturnPolicy {
    pub fn string(self) -> String {
        match self {
            ThumbnailReturnPolicy::PlaceHolder => "PlaceHolder",
            ThumbnailReturnPolicy::AutoGenerated => "AutoGenerated",
            ThumbnailReturnPolicy::ForceAutoGenerated => "ForceAutoGenerated",
        }
        .to_string()
    }
}

/// The size of the thumbnail to return.
/// Default is 30x30
pub enum ThumbnailSize {
    /// Default
    Size30x30,
    Size42x42,
    Size50x50,
    Size60x62,
    Size75x75,
    Size110x110,
    Size140x140,
    Size150x150,
    Size160x100,
    Size160x600,
    Size250x250,
    Size256x144,
    Size300x250,
    Size304x166,
    Size384x216,
    Size396x216,
    Size420x420,
    Size480x270,
    Size512x512,
    Size576x324,
    Size700x700,
    Size728x90,
    Size768x432,
    Size1200x80,
}

// Implement Into for ThumbnailSize to convert it to a string
impl ThumbnailSize {
    pub fn string(self) -> String {
        match self {
            ThumbnailSize::Size30x30 => "30x30",
            ThumbnailSize::Size42x42 => "42x42",
            ThumbnailSize::Size50x50 => "50x50",
            ThumbnailSize::Size60x62 => "60x62",
            ThumbnailSize::Size75x75 => "75x75",
            ThumbnailSize::Size110x110 => "110x110",
            ThumbnailSize::Size140x140 => "140x140",
            ThumbnailSize::Size150x150 => "150x150",
            ThumbnailSize::Size160x100 => "160x100",
            ThumbnailSize::Size160x600 => "160x600",
            ThumbnailSize::Size250x250 => "250x250",
            ThumbnailSize::Size256x144 => "256x144",
            ThumbnailSize::Size300x250 => "300x250",
            ThumbnailSize::Size304x166 => "304x166",
            ThumbnailSize::Size384x216 => "384x216",
            ThumbnailSize::Size396x216 => "396x216",
            ThumbnailSize::Size420x420 => "420x420",
            ThumbnailSize::Size480x270 => "480x270",
            ThumbnailSize::Size512x512 => "512x512",
            ThumbnailSize::Size576x324 => "576x324",
            ThumbnailSize::Size700x700 => "700x700",
            ThumbnailSize::Size728x90 => "728x90",
            ThumbnailSize::Size768x432 => "768x432",
            ThumbnailSize::Size1200x80 => "1200x80",
        }
        .to_string()
    }
}

/// The image format to return.
pub enum ThumbnailFormat {
    /// Default
    Png,
    Jpeg,
}

// Implement Into for ThumbnailFormat to convert it to a string
impl ThumbnailFormat {
    pub fn string(self) -> String {
        match self {
            ThumbnailFormat::Png => "Png",
            ThumbnailFormat::Jpeg => "Jpeg",
        }
        .to_string()
    }
}

#[derive(Debug, Serialize, Deserialize, Clone, Type)]
#[serde(rename_all = "camelCase")]
pub struct ThumbnailResponse {
    pub target_id: u32,
    pub state: String,
    pub image_url: String,
}
